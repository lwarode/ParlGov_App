{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4GqP7sY3kUtg"
      },
      "source": [
        "# __Predicting (Intra-)Regime Change based on V-Dem Data__\n",
        "## Machine Learning Group Project (Lab 1, Group C)\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d1HR7YZ_OM60"
      },
      "source": [
        "**The baseline paper of this project (Morgan et al. 2019) uses a subset of the whole V-Dem dataset. Since one of the main purposes of our project is to assess the validity of the baseline's approach, we will roughly compare two versions (the original, or \"raw\" version and the preprocessed version of the paper, both on basis of the 2022 V-Dem release).**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aSZipyw_qXYv"
      },
      "source": [
        "# Setup and Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xzYJZeKDqYp2"
      },
      "source": [
        "## Basic Setup"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "QjHYZ3DpmS1O"
      },
      "outputs": [],
      "source": [
        "# load packages\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "#assert sklearn.__version__ >= \"0.20\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "20L7Xet_0uNa"
      },
      "source": [
        "### Exporting Figures"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "os.makedirs(\"figures\", exist_ok = True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = os.path.join(\"figures\", fig_id + \".\" + fig_extension)\n",
        "    print(\"Saving figure\", fig_id)\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)"
      ],
      "metadata": {
        "id": "r1dnhdRAuwZR"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IkM1meR90uNa"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z5iuZfiYn1kJ",
        "outputId": "60772e7d-55b5-403e-e1a7-3a8600e6e832"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# mount drive\n",
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\", force_remount=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ksv3lJFOkK1o"
      },
      "outputs": [],
      "source": [
        "# load the most recent version of V-Dem data\n",
        "vdem_2022_raw = pd.read_csv(\"/content/drive/MyDrive/GRAD-C24_Machine_Learning/ML_Lab-1_Group-C/data/vdem_version_2022.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O08TDU0AqdMM"
      },
      "source": [
        "## Take a look at raw V-Dem data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6AOwO52LqvND"
      },
      "outputs": [],
      "source": [
        "vdem_2022_raw.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MXWS2R4Aq3-y"
      },
      "outputs": [],
      "source": [
        "# General info of the V-Dem dataset\n",
        "vdem_2022_raw.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_J_-YGOjEH6l"
      },
      "source": [
        "The unmodified V-Dem dataset (version 2022) has 27380 observations across 4171 variables. While there are only 483 official V-Dem indicators and 59 other relevant indicators from other data sources, the large number of columns comes from the fact that V-Dem also includes further descriptive statistics (a large share of V-Dem's variables are based on country expert assessments) and versions of the variables."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ANK0O39TIk0R"
      },
      "outputs": [],
      "source": [
        "# minimum and maximum year of all observations\n",
        "print(\n",
        "    \"The earliest observation is from the year\", vdem_2022_raw[\"year\"].min(),\n",
        "    \"while the latest observation is from\", vdem_2022_raw[\"year\"].max()\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zs6YS0f-tN-6"
      },
      "outputs": [],
      "source": [
        "vdem_2022_raw.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YK_VxIvgvS9N"
      },
      "outputs": [],
      "source": [
        "# take a look at dependent variable (v2x_regime)\n",
        "v2x_regime_raw = vdem_2022_raw[\"v2x_regime\"].value_counts()\n",
        "#vdem_2022_raw.groupby(\"v2x_regime\")[\"v2x_regime\"].agg(\"count\")\n",
        "print(v2x_regime_raw)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dORlouaiTuzH"
      },
      "outputs": [],
      "source": [
        "# plot dependent variable (v2x_regime)\n",
        "#plt.bar(x = v2x_regime_raw, y = \"count\")\n",
        "df = pd.DataFrame(v2x_regime_raw)\n",
        "ax = df.plot.bar(x='lab', y='val', rot=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xvevEiMtM9Se"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bi28fesMuPCd"
      },
      "source": [
        "## Use preprocessed data file for replication purposes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "pFGpapzEukj8"
      },
      "outputs": [],
      "source": [
        "vdem_2022_repl = pd.read_csv(\"https://raw.githubusercontent.com/vdeminstitute/part/main/create-data/output/part-v12.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "zDXO7THPxbVP",
        "outputId": "af898da3-856e-4e89-93ef-65f2f746fd33"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gwcode  year country_name  country_id  any_neg_change  any_neg_change_2yr  \\\n",
              "0      70  1970       Mexico           3             0.0                 0.0   \n",
              "1      70  1971       Mexico           3             0.0                 0.0   \n",
              "2      70  1972       Mexico           3             0.0                 0.0   \n",
              "3      70  1973       Mexico           3             0.0                 0.0   \n",
              "4      70  1974       Mexico           3             0.0                 0.0   \n",
              "\n",
              "   v2x_regime  v2x_regime_amb  lagged_v2x_regime  \\\n",
              "0         1.0             3.0                  1   \n",
              "1         1.0             3.0                  1   \n",
              "2         1.0             3.0                  1   \n",
              "3         1.0             3.0                  1   \n",
              "4         1.0             3.0                  1   \n",
              "\n",
              "  lagged_v2x_regime_asCharacter  ... lagged_internal_confl_part_minor  \\\n",
              "0           Electoral Autocracy  ...                                0   \n",
              "1           Electoral Autocracy  ...                                0   \n",
              "2           Electoral Autocracy  ...                                0   \n",
              "3           Electoral Autocracy  ...                                0   \n",
              "4           Electoral Autocracy  ...                                0   \n",
              "\n",
              "   lagged_war  lagged_war_major  lagged_war_minor  lagged_any_conflict  \\\n",
              "0           0                 0                 0                    0   \n",
              "1           0                 0                 0                    0   \n",
              "2           0                 0                 0                    0   \n",
              "3           0                 0                 0                    0   \n",
              "4           0                 0                 0                    0   \n",
              "\n",
              "   lagged_any_conflict_major  lagged_any_conflict_minor  lagged_ext_conf  \\\n",
              "0                          0                          0                0   \n",
              "1                          0                          0                0   \n",
              "2                          0                          0                0   \n",
              "3                          0                          0                0   \n",
              "4                          0                          0                0   \n",
              "\n",
              "   lagged_ext_conf_major  lagged_ext_conf_minor  \n",
              "0                      0                      0  \n",
              "1                      0                      0  \n",
              "2                      0                      0  \n",
              "3                      0                      0  \n",
              "4                      0                      0  \n",
              "\n",
              "[5 rows x 465 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-28c89244-139e-4aff-837e-8cc307743f01\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gwcode</th>\n",
              "      <th>year</th>\n",
              "      <th>country_name</th>\n",
              "      <th>country_id</th>\n",
              "      <th>any_neg_change</th>\n",
              "      <th>any_neg_change_2yr</th>\n",
              "      <th>v2x_regime</th>\n",
              "      <th>v2x_regime_amb</th>\n",
              "      <th>lagged_v2x_regime</th>\n",
              "      <th>lagged_v2x_regime_asCharacter</th>\n",
              "      <th>...</th>\n",
              "      <th>lagged_internal_confl_part_minor</th>\n",
              "      <th>lagged_war</th>\n",
              "      <th>lagged_war_major</th>\n",
              "      <th>lagged_war_minor</th>\n",
              "      <th>lagged_any_conflict</th>\n",
              "      <th>lagged_any_conflict_major</th>\n",
              "      <th>lagged_any_conflict_minor</th>\n",
              "      <th>lagged_ext_conf</th>\n",
              "      <th>lagged_ext_conf_major</th>\n",
              "      <th>lagged_ext_conf_minor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>70</td>\n",
              "      <td>1970</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Electoral Autocracy</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>70</td>\n",
              "      <td>1971</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Electoral Autocracy</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>1972</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Electoral Autocracy</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>1973</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Electoral Autocracy</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>1974</td>\n",
              "      <td>Mexico</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>Electoral Autocracy</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 465 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28c89244-139e-4aff-837e-8cc307743f01')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-28c89244-139e-4aff-837e-8cc307743f01 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-28c89244-139e-4aff-837e-8cc307743f01');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "vdem_2022_repl.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AlhK-LmMxe5P",
        "outputId": "8aa679ac-8163-405b-e262-6194e4eda529"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 8359 entries, 0 to 8358\n",
            "Columns: 465 entries, gwcode to lagged_ext_conf_minor\n",
            "dtypes: float64(341), int64(120), object(4)\n",
            "memory usage: 29.7+ MB\n"
          ]
        }
      ],
      "source": [
        "vdem_2022_repl.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wTt63yTMSjld",
        "outputId": "40523a48-4983-4e76-f689-3568645faba3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The earliest observation is from the year 1970 while the latest observation is from 2022\n"
          ]
        }
      ],
      "source": [
        "# minimum and maximum year of all observations\n",
        "print(\n",
        "    \"The earliest observation is from the year\", vdem_2022_repl[\"year\"].min(),\n",
        "    \"while the latest observation is from\", vdem_2022_repl[\"year\"].max()\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "bq2I_gxuxg7U",
        "outputId": "cf6bac24-94b0-46c9-a178-8be9f0649c75"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            gwcode         year   country_id  any_neg_change  \\\n",
              "count  8359.000000  8359.000000  8359.000000     8190.000000   \n",
              "mean    463.043546  1997.038402    92.536906        0.021245   \n",
              "std     240.045013    15.145062    55.655218        0.144210   \n",
              "min       2.000000  1970.000000     3.000000        0.000000   \n",
              "25%     310.000000  1984.000000    47.000000        0.000000   \n",
              "50%     461.000000  1998.000000    88.000000        0.000000   \n",
              "75%     663.000000  2010.000000   132.000000        0.000000   \n",
              "max     950.000000  2022.000000   210.000000        1.000000   \n",
              "\n",
              "       any_neg_change_2yr   v2x_regime  v2x_regime_amb  lagged_v2x_regime  \\\n",
              "count         8033.000000  8190.000000     8190.000000        8359.000000   \n",
              "mean             0.041703     1.347741        4.025275           1.337481   \n",
              "std              0.199922     1.087885        3.186700           1.089167   \n",
              "min              0.000000     0.000000        0.000000           0.000000   \n",
              "25%              0.000000     0.000000        1.000000           0.000000   \n",
              "50%              0.000000     1.000000        3.000000           1.000000   \n",
              "75%              0.000000     2.000000        7.000000           2.000000   \n",
              "max              1.000000     3.000000        9.000000           3.000000   \n",
              "\n",
              "       lagged_is_closed_autocracy  lagged_currentRegimeDuration  ...  \\\n",
              "count                 8359.000000                   8359.000000  ...   \n",
              "mean                     0.279938                     26.999402  ...   \n",
              "std                      0.448995                     28.119389  ...   \n",
              "min                      0.000000                      1.000000  ...   \n",
              "25%                      0.000000                      6.000000  ...   \n",
              "50%                      0.000000                     16.000000  ...   \n",
              "75%                      1.000000                     36.000000  ...   \n",
              "max                      1.000000                    122.000000  ...   \n",
              "\n",
              "       lagged_internal_confl_part_minor   lagged_war  lagged_war_major  \\\n",
              "count                       8359.000000  8359.000000       8359.000000   \n",
              "mean                           0.205647     0.031104          0.016150   \n",
              "std                            0.404198     0.173610          0.126061   \n",
              "min                            0.000000     0.000000          0.000000   \n",
              "25%                            0.000000     0.000000          0.000000   \n",
              "50%                            0.000000     0.000000          0.000000   \n",
              "75%                            0.000000     0.000000          0.000000   \n",
              "max                            1.000000     1.000000          1.000000   \n",
              "\n",
              "       lagged_war_minor  lagged_any_conflict  lagged_any_conflict_major  \\\n",
              "count       8359.000000          8359.000000                8359.000000   \n",
              "mean           0.015313             0.316425                   0.156598   \n",
              "std            0.122801             0.465109                   0.363443   \n",
              "min            0.000000             0.000000                   0.000000   \n",
              "25%            0.000000             0.000000                   0.000000   \n",
              "50%            0.000000             0.000000                   0.000000   \n",
              "75%            0.000000             1.000000                   0.000000   \n",
              "max            1.000000             1.000000                   1.000000   \n",
              "\n",
              "       lagged_any_conflict_minor  lagged_ext_conf  lagged_ext_conf_major  \\\n",
              "count                8359.000000      8359.000000            8359.000000   \n",
              "mean                    0.212585         0.316425               0.156598   \n",
              "std                     0.409161         0.465109               0.363443   \n",
              "min                     0.000000         0.000000               0.000000   \n",
              "25%                     0.000000         0.000000               0.000000   \n",
              "50%                     0.000000         0.000000               0.000000   \n",
              "75%                     0.000000         1.000000               0.000000   \n",
              "max                     1.000000         1.000000               1.000000   \n",
              "\n",
              "       lagged_ext_conf_minor  \n",
              "count            8359.000000  \n",
              "mean                0.212585  \n",
              "std                 0.409161  \n",
              "min                 0.000000  \n",
              "25%                 0.000000  \n",
              "50%                 0.000000  \n",
              "75%                 0.000000  \n",
              "max                 1.000000  \n",
              "\n",
              "[8 rows x 461 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6105eb8-87a0-4db3-89a9-636434a7956d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gwcode</th>\n",
              "      <th>year</th>\n",
              "      <th>country_id</th>\n",
              "      <th>any_neg_change</th>\n",
              "      <th>any_neg_change_2yr</th>\n",
              "      <th>v2x_regime</th>\n",
              "      <th>v2x_regime_amb</th>\n",
              "      <th>lagged_v2x_regime</th>\n",
              "      <th>lagged_is_closed_autocracy</th>\n",
              "      <th>lagged_currentRegimeDuration</th>\n",
              "      <th>...</th>\n",
              "      <th>lagged_internal_confl_part_minor</th>\n",
              "      <th>lagged_war</th>\n",
              "      <th>lagged_war_major</th>\n",
              "      <th>lagged_war_minor</th>\n",
              "      <th>lagged_any_conflict</th>\n",
              "      <th>lagged_any_conflict_major</th>\n",
              "      <th>lagged_any_conflict_minor</th>\n",
              "      <th>lagged_ext_conf</th>\n",
              "      <th>lagged_ext_conf_major</th>\n",
              "      <th>lagged_ext_conf_minor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8190.000000</td>\n",
              "      <td>8033.000000</td>\n",
              "      <td>8190.000000</td>\n",
              "      <td>8190.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>463.043546</td>\n",
              "      <td>1997.038402</td>\n",
              "      <td>92.536906</td>\n",
              "      <td>0.021245</td>\n",
              "      <td>0.041703</td>\n",
              "      <td>1.347741</td>\n",
              "      <td>4.025275</td>\n",
              "      <td>1.337481</td>\n",
              "      <td>0.279938</td>\n",
              "      <td>26.999402</td>\n",
              "      <td>...</td>\n",
              "      <td>0.205647</td>\n",
              "      <td>0.031104</td>\n",
              "      <td>0.016150</td>\n",
              "      <td>0.015313</td>\n",
              "      <td>0.316425</td>\n",
              "      <td>0.156598</td>\n",
              "      <td>0.212585</td>\n",
              "      <td>0.316425</td>\n",
              "      <td>0.156598</td>\n",
              "      <td>0.212585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>240.045013</td>\n",
              "      <td>15.145062</td>\n",
              "      <td>55.655218</td>\n",
              "      <td>0.144210</td>\n",
              "      <td>0.199922</td>\n",
              "      <td>1.087885</td>\n",
              "      <td>3.186700</td>\n",
              "      <td>1.089167</td>\n",
              "      <td>0.448995</td>\n",
              "      <td>28.119389</td>\n",
              "      <td>...</td>\n",
              "      <td>0.404198</td>\n",
              "      <td>0.173610</td>\n",
              "      <td>0.126061</td>\n",
              "      <td>0.122801</td>\n",
              "      <td>0.465109</td>\n",
              "      <td>0.363443</td>\n",
              "      <td>0.409161</td>\n",
              "      <td>0.465109</td>\n",
              "      <td>0.363443</td>\n",
              "      <td>0.409161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>1970.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>310.000000</td>\n",
              "      <td>1984.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>461.000000</td>\n",
              "      <td>1998.000000</td>\n",
              "      <td>88.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>663.000000</td>\n",
              "      <td>2010.000000</td>\n",
              "      <td>132.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>950.000000</td>\n",
              "      <td>2022.000000</td>\n",
              "      <td>210.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 461 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6105eb8-87a0-4db3-89a9-636434a7956d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e6105eb8-87a0-4db3-89a9-636434a7956d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e6105eb8-87a0-4db3-89a9-636434a7956d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "vdem_2022_repl.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S0w_EAhyw7g0",
        "outputId": "7cab2a69-74c9-4fa3-9600-2461c67b4e03"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "v2x_regime\n",
            "Closed autocracy       2254\n",
            "Electoral autocracy    2497\n",
            "Electoral democracy    1776\n",
            "Liberal democracy      1663\n",
            "Name: v2x_regime, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# take a look at dependent variable (v2x_regime)\n",
        "# vdem_2022_repl[\"v2x_regime\"].value_counts()\n",
        "v2x_regime_count = vdem_2022_repl.groupby(\"v2x_regime\", as_index = True)[\"v2x_regime\"].count()\n",
        "# v2x_regime_count = v2x_regime_count.to_frame().reset_index()\n",
        "v2x_regime_count = v2x_regime_count.rename({0: \"Closed autocracy\", 1: \"Electoral autocracy\", 2: \"Electoral democracy\", 3: \"Liberal democracy\"})\n",
        "print(v2x_regime_count)\n",
        "#v2x_regime_count['%'] = 100 * v2x_regime_count['sales'] / v2x_regime_count.groupby('state')['sales'].transform('sum')\n",
        "# v2x_regime_count = v2x_regime_count.to_frame() \n",
        "# v2x_regime_count[\"relative_share\"] = round(v2x_regime_count / len(vdem_2022_repl), 3)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "2euUqOxd4-8P",
        "outputId": "adc8c431-081e-4642-fec1-5bea5f99d546",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving figure row_index\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEYCAYAAAAJeGK1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dd5xcZdn/8c83oYTeEnrHIAJKi3QBQakqYKGIEMHHCFJFQAQFBPwBgqI8lAcUJKDSBKQqnaD00AOIRKS3IL2XXL8/rnuSk2HLbJLZmd39vl+vfe3MmXNm7j07M9e523UrIjAzM2s3g1pdADMzs444QJmZWVtygDIzs7bkAGVmZm3JAcrMzNrSDK0uQDMMHTo0llxyyVYXw8zMGnDXXXe9FBHD6rf3ywC15JJLMnbs2FYXw8zMGiDpiY62u4nPzMzakgOUmZm1JQcoMzNrS00LUJIWk3SDpIckPShp77L9MEnPSLq3/GxeOebHksZLekTSJpXtm5Zt4yUd2Kwym5lZ+2jmIIkPgR9GxN2S5gDuknRNeez4iDiuurOk5YHtgBWAhYFrJS1bHj4J+CLwNHCnpEsj4qEmlt3MzFqsaQEqIp4Dniu335D0MLBIF4dsCZwbEe8B/5E0Hli9PDY+Ih4DkHRu2dcBysysH+uVYeaSlgRWAW4H1gH2kLQTMJasZb1CBq/bKoc9zeSA9lTd9jU6eI1RwCiAxRdffPr+AdYSSx54RauLMFUeP3qLVhfBrF9o+iAJSbMDFwL7RMTrwCnAMsDKZA3rl9PjdSLitIgYEREjhg372HwvMzPrY5pag5I0Ixmc/hgRFwFExAuVx38LXF7uPgMsVjl80bKNLrabmVk/1cxRfAJOBx6OiF9Vti9U2W1rYFy5fSmwnaSZJS0FDAfuAO4EhktaStJM5ECKS5tVbjMzaw/NrEGtA+wIPCDp3rLtIGB7SSsDATwOfA8gIh6UdD45+OFDYPeI+AhA0h7AVcBg4IyIeLCJ5TYzszbQzFF8/wDUwUNXdnHMz4Gfd7D9yq6OMzOz/seZJMzMrC05QJmZWVtygDIzs7bkAGVmZm3JAcrMzNqSA5SZmbUlBygzM2tLDlBmZtaWHKDMzKwtOUCZmVlb6pX1oPoTr1FkZtY7XIMyM7O25ABlZmZtyQHKzMzakgOUmZm1JQcoMzNrSw5QZmbWlhygzMysLTlAmZlZW3KAMjOztuQAZWZmbckByszM2pIDlJmZtaWmBShJi0m6QdJDkh6UtHfZPq+kayQ9Wn7PU7ZL0gmSxku6X9KqlecaWfZ/VNLIZpXZzMzaRzNrUB8CP4yI5YE1gd0lLQ8cCFwXEcOB68p9gM2A4eVnFHAKZEADDgXWAFYHDq0FNTMz67+aFqAi4rmIuLvcfgN4GFgE2BIYXXYbDWxVbm8JnBXpNmBuSQsBmwDXRMTLEfEKcA2wabPKbWZm7aFX+qAkLQmsAtwOLBARz5WHngcWKLcXAZ6qHPZ02dbZ9vrXGCVprKSxEyZMmK7lNzOz3tf0ACVpduBCYJ+IeL36WEQEENPjdSLitIgYEREjhg0bNj2e0szMWqipAUrSjGRw+mNEXFQ2v1Ca7ii/XyzbnwEWqxy+aNnW2XYzM+vHmjmKT8DpwMMR8avKQ5cCtZF4I4FLKtt3KqP51gReK02BVwEbS5qnDI7YuGwzM7N+bIZGdpI0CFgJWBh4BxgXES92fRTrADsCD0i6t2w7CDgaOF/Sd4AngG3KY1cCmwPjgbeBnQEi4mVJRwB3lv0Oj4iXGym3mZn1XV0GKEnLAD8CvgA8CkwAhgDLSnobOBUYHRET64+NiH8A6uSpN+pg/wB272jniDgDOKOrspqZWf/SXQ3qSHI+0vdKAJlE0vzAN8la0ugOjjUzM5tqXQaoiNi+i8deBH493UtkZmZGg31QAJLWBpasHhMRZzWhTGZmZg0PkjgbWAa4F/iobA7AAcrMzJqi0RrUCGD5+n4oMzOzZml0HtQ4YMFmFsTMzKyq0RrUUOAhSXcA79U2RsRXmlIqMzMb8BoNUIc1sxBmZmb1upuoq7L8xZju9pn+RTOz3rLkgVe0ughT5fGjt2h1EayJuuuDukHSnpIWr26UNJOkDSWNZnJePTMzs+mmuya+TYFdgHMkLQW8CsxCBrargV9HxD3NLaKZmQ1E3WWSeBc4GTi5LJ0xFHgnIl7tjcKZmdnA1XAmiYj4AHiu2x3NzMymg15Z8t3MzKynHKDMzKwtNZqLbzay72mipGWB5YC/lmY/MzNrkIf0N67RGtRNwBBJi5Cj93YEzmxWoczMzBoNUIqIt4GvAidHxDeAFZpXLDMzG+gaDlCS1gJ2AGr108HNKZKZmVnjAWpv4MfAxRHxoKSlgRuaVywzMxvoGhokERE3kf1QtfuPAXs1q1BmZmaNjuJbFtiPjy/5vmFzimVmZgNdo018FwD3AD8B9q/8dErSGZJelDSusu0wSc9Iurf8bF557MeSxkt6RNImle2blm3jJR3Ykz/OzMz6rkZTHX0YEaf08LnPBE4EzqrbfnxEHFfdIGl5YDtyZODCwLWl1gZwEvBF4GngTkmXRsRDPSyLmZn1MY3WoC6T9H1JC0mat/bT1QGl3+rlBp9/S+DciHgvIv4DjAdWLz/jI+KxiHgfOLfsa2Zm/VyjNajamk/VZr0Alp6K19xD0k7AWOCHEfEKsAhwW2Wfp8s2gKfqtq/R0ZNKGgWMAlh88cU72sXMzPqQhmpQEbFUBz9TE5xOAZYBViYzo/9yKp6jszKeFhEjImLEsGHDptfTmplZizQ6im9GYDdgvbLpRuDUnubii4gXKs/5W+DycvcZYLHKrouWbXSx3czM+rFG+6BOAVajLF5Ybvd00ASSFqrc3RqojfC7FNhO0sxl5d7hwB3AncBwSUtJmokcSHFpT1/XzMz6nkb7oD4bEStV7l8v6b6uDpB0DrABMFTS08ChwAaSVib7rx4HvgdQslOcDzwEfAjsHhEflefZA7iKTK10RkQ82GCZzcysD2s0QH0kaZmI+DdASXX0UVcHRMT2HWw+vYv9fw78vIPtVwJXNlhOMzPrJxoNUPsDN0h6DBCwBLBz00plZmYDXqO5+K6TNBz4ZNn0SES817ximZnZQNdlgJK0YURcL+mrdQ99QhIRcVETy2ZmZgNYdzWo9YHrgS938FgADlBmZtYUXQaoiDi03Dy8pCCapAwHNzMza4pG50Fd2MG2P0/PgpiZmVV11we1HJlhfK66fqg5gSHNLJiZmQ1s3fVBfRL4EjA3U/ZDvQF8t1mFMjMz664P6hLgEklrRcStvVQmMzOzhifq3iNpd7K5b1LTXkTs0pRSmZnZgNfoIImzgQWBTYAxZFbxN5pVKDMzs0YD1Cci4qfAWxExGtiCThYONDMzmx4aDVC1dZ9elbQiMBcwf3OKZGZm1ngf1GmS5gF+Sq7HNHu5bWZm1hSNBqjfl/WZxgBTs9S7mZlZjzTaxPcfSadJ2kiSmloiMzMzGg9QywHXArsDj0s6UdK6zSuWmZkNdA0FqIh4OyLOj4ivAiuTqY7GNLVkZmY2oDVag0LS+pJOBu4iJ+tu07RSmZnZgNfQIAlJjwP3AOcD+0fEW80slJmZWbcBStJg4IyIOLwXymNmZgY00MRXhpd/qRfKYmZmNkmj86BulnQicB4wqXkvIu5uSqnMzGzAa3SQxMpkJvPDgV+Wn+O6OkDSGZJelDSusm1eSddIerT8nqdsl6QTJI2XdL+kVSvHjCz7PyppZE//QDMz65saHWb++Q5+NuzmsDOBTeu2HQhcFxHDgevKfYDNgOHlZxRwCmRAAw4lE9OuDhxaC2pmZta/NRSgJC0g6XRJfy33l5f0na6OiYibgJfrNm8JjC63RwNbVbafFek2YG5JC5HLe1wTES9HxCvANXw86JmZWT/UaBPfmcBVwMLl/r+Afabi9RaIiOfK7eeBBcrtRYCnKvs9XbZ1tv1jJI2SNFbS2AkTJkxF0czMrJ00GqCGRsT5wESAiPgQ+GhaXjgiAohpeY665zstIkZExIhhw4ZNr6c1M7MWaTRAvSVpPkpAkbQm8NpUvN4LpemO8vvFsv0ZYLHKfouWbZ1tNzOzfq7RALUvuQ7UMpJuBs4C9pyK17sUqI3EGwlcUtm+UxnNtybwWmkKvArYWNI8ZXDExmWbmZn1cw3Ng4qIuyWtD3wSEPBIRHzQ1TGSzgE2AIZKepocjXc0cH4ZYPEEk/P5XQlsDowH3gZ2Lq/7sqQjgDvLfodHRP3ACzMz64cazcX3DeBvEfGgpJ8Aq0o6squJuhGxfScPbdTBvkEu5dHR85wBnNFIOc3MrP9otInvpxHxRlkDaiPgdMpcJTMzs2ZoNEDVRuxtAfw2Iq4AZmpOkczMzBoPUM9IOhXYFrhS0sw9ONbMzKzHGg0y25Cj5zaJiFeBeYH9m1YqMzMb8Bpe8h14HNhM0p7AQhFxdTMLZmZmA1ujufgOIXPnzQcMBX5fRvOZmZk1RaPrQe0ArBQR7wJIOhq4FziyWQUzM7OBrdE+qGeBIZX7M+OUQ2Zm1kRd1qAk/S+Zf+814EFJ15T7XwTuaH7xzMxsoOquiW9s+X0XcHFl+41NKY2ZmVnRZYCKiNEAkoYAnyibx9f6oszMzJqlyz4oSTNI+gW5UOBoMov5U5J+IWnG3iigmZkNTN0NkjiWnJS7VESsFhGrAssAcwPHNbtwZmY2cHUXoL4EfDci3qhtiIjXgd3I5THMzMyaorsAFWUpjPqNHzEdl2s3MzOr112AekjSTvUbJX0L+GdzimRmZtb9MPPdgYsk7UIONQcYAcwCbN3MgpmZ2cDW3TDzZ4A1JG0IrFA2XxkR1zW9ZGZmNqA1lIsvIq4Hrm9yWczMzCbxooNmZtaWHKDMzKwtOUCZmVlbcoAyM7O21JIAJelxSQ9IulfS2LJtXknXSHq0/J6nbJekEySNl3S/pFVbUWYzM+tdraxBfT4iVo6IEeX+gcB1ETEcuK7cB9gMGF5+RgGn9HpJzcys17VTE9+WZMZ0yu+tKtvPinQbMLekhVpRQDMz6z2tClABXC3pLkmjyrYFIuK5cvt5YIFyexHgqcqxT5dtU5A0StJYSWMnTJjQrHKbmVkvaWiibhOsGxHPSJofuEbSFHn9IiIk9SgZbUScBpwGMGLECCeyNTPr41pSgyoplIiIF8ml5FcHXqg13ZXfL5bdnwEWqxy+aNlmZmb9WK8HKEmzSZqjdhvYGBgHXAqMLLuNBC4pty8Fdiqj+dYEXqs0BZqZWT/Viia+BYCLJdVe/08R8TdJdwLnS/oO8ASwTdn/SnJxxPHA28DOvV9kMzPrbb0eoCLiMWClDrb/F9iog+1BLvthZmYDSDsNMzczM5vEAcrMzNqSA5SZmbUlBygzM2tLDlBmZtaWHKDMzKwtOUCZmVlbcoAyM7O25ABlZmZtyQHKzMzakgOUmZm1JQcoMzNrSw5QZmbWlhygzMysLTlAmZlZW3KAMjOztuQAZWZmbckByszM2pIDlJmZtSUHKDMza0sOUGZm1pYcoMzMrC31mQAlaVNJj0gaL+nAVpfHzMyaq08EKEmDgZOAzYDlge0lLd/aUpmZWTP1iQAFrA6Mj4jHIuJ94FxgyxaXyczMmqivBKhFgKcq958u28zMrJ+aodUFmF4kjQJGlbtvSnqkleWZSkOBl5rxxDqmGc/ap/lc9x6f697TV8/1Eh1t7CsB6hlgscr9Rcu2SSLiNOC03izU9CZpbESMaHU5BgKf697jc917+tu57itNfHcCwyUtJWkmYDvg0haXyczMmqhP1KAi4kNJewBXAYOBMyLiwRYXy8zMmqhPBCiAiLgSuLLV5WiyPt1E2cf4XPcen+ve06/OtSKi1WUwMzP7mL7SB2VmZgOMA5SZWR8naVD5rVaXZXpygGoD/e1N1c58rq0/ioiJ1fv95X3uANUGIiIkLSlpk1aXpb+L0ukqac3y25+BJpL0KUn7troc/VF9EJL0PeBEmPw+7+v84WyR6hdjub0hsEF/ufJpJ/XNH5IWBy6UtEj9ladNm+r7t9z+BLCQitaVrP/pIAg9DjwH/efCq1/8EX1J7UMaERMlzSlpUOVLcsH+cuXTTmrnt3JuXwLOB+ZoWaH6mdoXYmkNWEzS4uV8vwusEUVrS9n31Qd6SftIqmWOeA/4Eny8ya+vcoDqRZIGV5qYFgIOAc4sD/8RWF7SZ1tUvH5F0qC6D/JISVeUL863yXRZa9T2bVU5+4Pyvp5Ybi8FbA9cJGnRiLgGeFLS11tayH6gXMxGuQhYRtKngY+AX0jaHrgZuF/S1q0t6fTjeVC9TNIswE+Au4FrgDOAfwNPADMCd0bELZLkK85pJ2lDYC3gWOBnwJzAXcB/gF2BHSLiw9aVsH8ozab/D7g+Is6QdBh5rmci82beFxFX1rUY2FSQdDDwZeBnEfHX0ne9Pvk+/ydwTURcVC4cPmplWaeVA1QvkrQcMBr4B3BERLwqaV5gaeDXwArAbyLiMAeoaSfpSGBz8lxfLGlmsuZ0Nrlky5wRsanP9bQpi4eeDlxAvn8/KrXSocBRwFeBGyLiqy0sZr8gaVNgL2D7iHit7rGDyTylT0XE5q0o3/Tmpo0m6aRTeBXgnoj4YQlOioiXI2IssAvwK2AVSfP5C7Nn6pvpJC0ALAesVYKTgA8i4t/kh/gyYD1JI3yuG9fJQIeFgf9ExK9KcBocERMj4kXyy3RXYKKkT/RqYfu4spJ4vQWB1yLiNUmDS1N27b1/HPnefkPSkr1UzKZygGqCWl9TaSuer/LQEOAdSbNKmrE8PlPZ/1/AOcALwJstKXgfVW02kjRj2fw+sCzwmXJ/UBmYMiginoyIs4HDgU/1fon7plofSLn9KUmzlYdmJNdgm7vWrCRpiKS5I+It4Ary//Fqi4reJ5XzOIukvSV9vmx+Anhe0tIR8VF5339a0sIR8R7wCjAbTVoTqrc5QDVBrd1X0gHA5ZJ+Xt5gdwNLActHxAdl94MpnfXkl+XGwPy9XOQ+rQSeRSRdARwl6ZsR8QpwCTBC0izlw7458D+VQzdtSYH7qMpFwHHAWcBhyjlOt5DrtW0MzCFpVnI+zprl0PWAjYBhHmreNU05/WRj4EZgbmBUOe83A7MAe0taU9JewPHAAuWwHYEPgQ/7w7l2H9R00sFV/M/JZen3Aw4jP6zrAjuQH9Z3yKv7ayNiv3LcZsBbEXFTr/8BfUy1A1jS54D/I8/zG8BFwNrAMGAbYCHgUfL8/yAi/lH6Tb5O9k/5Q9CJuvf17MD3yX68/cmBJ9sAW5bddyUvrhYDzouIn5fjlgBmiohHe7n4fUq1L1TSImTf3e3ABOAP5CCILYEbgN3JLoMhwF4R8WQ5bo6IeKMFxW8KB6jpoO5D/HXyTXMvOaLmN2Qb/ctkp/w3JC0KfA54MiJuLse5o76HShPTlsDV5BXkbMAvyeakmcmRTh8BXyGD1WmlyckaUPeFuRf5vr6A/ML8LTnH6TYyaK0dEW9JWgN4qfT1TXEhYd2TtAxwCvAXcgrKiuQSGt8hLwzOBJaOiFdKE+qr5bhaE3b/+h6JCP9M5Q8lwJfbM5IDHf4GLF62bQmcW26PAF4DftLB8wxq9d/S136ATwOXA0eX+wuQgepz5f5/gN93cNzgVpe93X+q70eyeWl34EJglrJt7dq5BRYnh5FfXP8c1c+Hfzo914Mrt9cH/gQcUNn2FeCX5fYqZD/eyZ39v/rbT59ZsLDddHBlOArYGRgdEU+W9t8lyE5NyOalU4GHy/GTrnTC80K6VM6lYsrJoAcBM0fEgbXdyA7ityXNRTaNhKSZIzuPa+fcV/NdqGs6nZnsP9qFnN/0TtltODCjpKXJK/tfk/1Qk/g93bXa5z+yb3RBYGL5WYDJ/UkA8wHzSTqUbHXZKSIurT5Xfz7XHiQxlSof4sMkbUNe+dwLzCtp/hJ8bgOWkHQLsDV5tX9hOb7/VMObrHyQJ0paVdKPgGeBq4DZSpMSQJBNqj8l/w9XRsQuteBUe57eLntfE5NHjp0K7Fu+DC8HBpfmJ4CLgf+S/X6fBk6IiJv7Q6d8b6m9FyWNBK4DNouIvwPnle3rll3PA/5M9uv9phacJA2IyoX7oKaSpGHkB3U88NOIeKqMutmBzPN2dUR8IGkessnvvnJc/2oj7iWS9iSv5E+PiBNLP95O5BXmzyLidUlzkpOd34iIceU494H0gKT5yff1zcCR5bwuDRwKjAH+EhEvl4FAc0XES+U4v6+7UTtHld8rAicD36+8Xxcim1TfAf4QEU909jy9WvgWcQ2qQfp4vraVgUci4tsR8RRARFwN3E8OX16lbHulEpwGD5Q31rTQx7OPzwCsBmwXEbXlBJ4mRzMF8L2y7fWIuDUixqnk4nNw6pyKus2fACZExAElOM0YEY+Rnfa1tFFExAeV4OT3dTeq56hyrj4DvFLerzNImiEingP+SjajblT3HKo7vt9zgOpG5U0xUdLsmjzxNoDhylRFVSeTWbI/linbX5bdUyXxKNlBD3kuN4LsM1XmM4ScV3YvuZzDFP+HyEwGA+aD3FOVPpCQtHgZdg85Qm8WSStABqLy+2LgIfLKfgp+X3ev0iWwq6Rvl5rqbeR8pc9GxIcR8WFpRr2VHK13Ud1zDLj3s5v4GiTpf8gmptfJzOMvkHOb/hOZlaCW++1C4J+VDmXroRKAjifnL91MtsFvAawSEbuUfdYmh+9fCkwMJ3ydKpJ+TDZLv0QOLLmFbCb9CDg+It6X9Dvgr7X+U+s5SUPJ9FrjyeH6/yUD/ltk//SewGfJuXy7RcSYctyAac7riGtQHdDkFC61+6sD3yIndp5CNjetTA6v/Zak35aBEAsDD9eCkzuNG6PJ6Ylq+cfOICfcHkvWnn4J3EFmKTi7jGj6P2BIRLxfrjx9rrtR30wt6TPkyLBPk0tkvE9mM3mMbOq7XNL9ZDOUg1MP6ON59D4N/CsidiQvdK8lz/EdZCvA4WSQ+lYtOMHArDVVDYiRID1RmooOAvaTtAo54XNmgIh4FrikfBd+kayGX0v2N10eEZeU55jUfNL7f0HfUT7Em5BD7/8jaT3yCn5h4NsR8Z6kfwI/JD/g3wG2Ij/YX4oyex78Qe6OppxMPlvkhOUZyHM9Z0Q8J+lKYB9yMu755DlXRNxb/xzWtTIacl5g/oj4J/A2sJoyZ96zkh4h0xK9HRE/kTQkIt6FSRcS/v7ANagplMDyMjBE0kvA/5aHXgAekbQBQAlEawELRcQTEfGXSnAa5DdW98p5+giYCzhL0u3Ad0pT3etkKh1KR/y7wBxlEMRZEXFI5Fwzv3+7ockr3U4sw8d/C5wiaU3gSfICa+Oyz63k/2PJ0od3n4NT46q1JklfBW4Czpa0A5lJ5nyy9kREPEBe+M5a7k8KTu4/ncw1qIrSYTwD2cTxHjlU/DblRLongJ0kTSRT6rxKB9mZ/SFuTOU83UUubPdURIws244CfibpwdI5vwJ1E0HLxYTPdRfqak2DgH2BF4Hnycm13yNzFH65dM6/CsxDZuGYgs915yotJh8pJzfPDaxKrkW2LDCS7Gu6CThY0rLkKL0HKBP3a3yepzTgB0lUOyElfQFYh2y6EzlkfP2IuKeMutkK2IzsFzkoIu5oTan7provzCHkB3ciOVHxZDK/2+WlaW87cj7IIHINrT1aVOw+qe5cn0S+Z2eNiK+XbceT576WK3J7YHZy7tPHApR1r9RKzwPGkc2jS5aa635k4ujfkZPM1wBmjIjLynEDeiBEVwZ8gAKQNFMZrbQE2fl+QeSy1QeSqUWWl/RZclDESxHxfjnOzR5TSZmOaE/KRFsyD9luwHcjJz0Pi4gJkhaNnPPk891DykXrtiH77K4CDiBz5h1dBgKdB1wXEcdryhRHntzcoFpwkfRNsj/1j2RN6RLg/ojYv4xK/Q05cu+YKAley/F+T3dhwLfhl+r2sZI+ETlr+1TgK5JWj4ijgQmSrgd+DwxzcJo2ko6WtGbkctV/IfuXdit9eA8Ch0p6HDgQJk3I9fluQAcjxw4jV1g9pYzCOwhYR9J6ZZDEicBKkmatBKdBDk5dq57nSs3nM+QIyHdKf9KewOclbV5G9Z4O3FINTuV4v6e7MKBqULWhyNXqtKTa6LD/RsQRZduvgE8C3yAn5K4H/D0i3u71QvdhHV2JS/oZ2Wy6Qbm/BTma6XSyqe/zZFPUZb1c3D6rrpl6QbJ5aQzZZHcemXn8T6XWtDPZN7Jt9KN1g3pLXdPpD8vmccA1ZBPe7WQLzMvKPHtHAJ8KL/MyVQZUDap0ZIakjSUdI+lLZTTNhcCikrYvu55A9kV9C3gvIq6KiLc7uEK1TpQvzdpV+feVq9kSEYeStdLjyv0rgAXJbPDLRsR1lbZ5n+8uSBqsKZdhH0kmdl2fHCq+DPle3kFS7UvycrJzfsHaBZtHQ3ZP0vLKzPgTJc0h6UKy1nQ7cC45af8scimS1cvF2Whg/8h1sjxPbyoMuDempGOAn5BpRnaTdFBkFuHbgR1L5/yBZJPen6tVcDd9NK5cCKxYmkeXA7aVdEF5+GBy5Ni2kjYF3gT+L3K+SPU5fL47UUbdHUlOGq+tdrsuGZxuIZublirB/lHgB8oF7h4HDoyIR2uBzc1MXVOu2LwfWfOEXHL9pjLqdFtgLPBYRNxIDqz6JvmeJyLO6/UC9yP9PkBVrw4lLUAOoV2fTKOzEPBdSVtExBnkldDO5Eq3PyjVdF/5NKiDK/HPAyeRAX8uYBNJP4iIf5FDnncgLxYOiYjrynP4fDfmSXLdoHUlLUwONlkaOITsaxoVEeeXwHUIOYpsGEy6ePB57oYmzyH7O/AIsGrps14U2FvSnWRi3S9GxPOlu+AkcpDEI9Xn8ii9qdMv+6CUyy7sCJwVEW9o8nLIg8i5X6OArSLiC6UdeRdgvYj4r6TZI+LN8jzumG+ApK3JPrqX6kaDzUh+MZ5Dpit6guxn2iQibpU0Vxks4aG2DarrbzoSWIlcluG8UkNdJiJWLY8vRi7HfgTwYW2Aj/WMMsPJPmRT9F8i4heSzgTmi4gvl30OIOfr7V77/rBp1/vl31IAABXBSURBVF9rUCuQE+V2hMlNGJEztN8nJyOeVvZ9H/iQXFqZSnDyRNDGbUHOYaqleKkNRvkAmBd4JiL+TGYffwn4dglkteDk5RoaVGo/i0j6O1krnQh8X7lw43HAB5JGSdqVXLZhQkS8HTmNwrWmHlLOjTyJPLfXkbWorcj0W0tLOknSNeRSJD91cJq++lUNqu7qfVdyQtypkdkgqleeRwPzkxkh5gN2jYjxrSp3X1R3Pucj07hcGBEn1410WpO8in+WTLB7FTns+d0WFb3Pqa/JS9oS2CUitiz3jyeT6/6SHMH3BXLu068i4u4WFLnPUq7J9GHl/ihg3YjYqQT4PcjBET8hR/guSdZazyn7u9VlOupXNahy9T6zpD+RiwauTGYbn79cedayZh9GNjs9CGxdC04ezdSY+hpPRPyX7LDfTdJypTm1lkZrLDn5eQ7g/Ig4PiLe9Qi97knaWtLQWvN0pQb0GvCmcmI5ZPb3ncnMHHdFxGER8a2IuLvuOKujNLOkvykTuX5Y9958CJgoafnynr+STBR9AHmBf0clOA12cJq++vwXci2oVD6E25FDw7civzTfZXKCxg/Km+jdiLgmIg4vfVSDy+N+c3Wj1JxqtdQDJX1F0tIRcQM5XP8EgPJBnyFyIbZbgD3KQJQpnsO6VG06rb43XyFzu61aHnsAeBxYnJJ8FCY3U7v5tHOR3iNr+OeVbR9VLlYnAM+ReThryV3/BfwjIl6oey6/p6ezPh2gqtXpyodwKSYnwb2MTEa6lqRaxub6iaP+smxAZURTSPqkpJvI0UzDycBERBwGvKdcrwly0Ttqx3V026ZUV9v5ETCnpO+X+7X/wX3kUPItJZ0raQxwJ3Bwqc1S9vN57kK1dhm5EOY8kn5Se7hsf4Rsvp6T7NM7Dzg2MomxNVmf74NSrtl0ADn/4B/kktS7AqeXkWJLkl+g9wP7RsQrLSpqn1XXp7QcsBjZf3cjOdhkM+DSiNhB0srA34AtIuKuFhW5T1LHmTc+T9ZKvxER/9TkvJGDyFFlm5ELCl5U9ncfSDcqQSnKeZw5It5RLnN/K9nndH/tXFeO+xTweFQWJPVFQHP16QAlaR1yzab9yOaQ5ckP8yfJJJl7kc17HwFHR8QzLSpqn6dM7vp/5HINhzA5jc5vyfljrwPfjIgLJX0ucu6INahu0MmBZN/HuIh4TNJhwNoRsXF5vMNkrg5OPSNpE/Li9kHgjxFxu6QfkQNQPln2+djigZ2df5v++kwTn6accFtrBlmcXNfmVTKT8HkR8Vcy4et5ZE2KiNgzIp5xZ3HjqueqXDkeRfbt7R05PHw2cgnr0eRoprHAIeVL8u/luD7z/mqVqWw67TAIOTh1re47ZF9ysNRu5NpvZ0taMCKOAZ6S9Luya9TXkhycek+fq0FJ2pkcIn4s2bxxGpnKZZdytTkvsHBEjKtW0X3V05i65o/aUgJLA4eSmQi+GRGvKoeP70Oe+w3JZK/n1Jo/rHtuOu0ddbXTVYChZCaOCcBXyVaWD4EXI+LrkoaSk8o/HRGPtajYRt+qQQ2WdAaZwHVM+WA/Tc6ruaAEpxXJD/EaAJXg5IEQDSqjmkLSF4FzJR1UHjqeTBO1SdnvNnKRwfeA0RFxRmnH9yrNDYocPj6XpHPIK/k7yMEOlwNXkF+kX5f0tcil17/h4NRzleC0Nbku09Ay+GFZYIeIWJucO7a1pL0i4iVgUQen1mvbAKWPz5OZj2zaGAncX64o3yfXFNpcmV34z8DJEXF69UB3ZHatPqgoF187mmximpU8r4+RA00+K2ldgIi4KSKOjIjTynGKyiRH+zg3nfaO+nMkaX1gf3J4+DmVh/6rTI22Gllzrf1/XlXRG+W1jrXV1W6lSak61+YzwPPkQIcZgIvJD+0I4N/kGizbke32L9fmJrjDuDGSFiInNP9VmRHiA/JL8g8RcT5wfmniO5wcjPIrYCNJ90TdGje+EOhcR02nZO1zNmCYMtP4q2RqqFklHcGUTafVrPp+X3ehrul0ODnH6TZyzaYRpa/peXLE7+NkjXUucjXnO8Dv5XbRtn1QyqzBZ5Nvrk+T7cTPkXn07iED1snkkhjXVo5zYOoBSUuRCzZ+Bpgb+C6ZleCDiPhp2Wchck7ZumW/Z6OsdGs9U5pO/we4jxz9OCd5zm+KsjSDMjnpemSfSK12OkUKHuuapJnIJXPmIC8CjgZeIDPovxK5WjbKRRzXJle7fats83dIm2ibpgJJRylXsq1dbe4LXBQRW5PZmH8IzFSucOYjh5MvRzY9TeI3Vvfqmj+eBT5H1khPLW3zfyDb4zcp+6wEjI/MwHFHRDztpo/uuem093TwfjwCuD8ivkKe65HAeHIpjCUkbQsQEW9FZpV5S84o03ZaHqAkrSJpCDlbe31J65fq9fvAMwClPf4ZMmgB7E6222/gjsyeqzR/fJvMK7YX8HNgFUlLRMQ44BdkepfLyOa90XXP0Z5V7zZRap1fLLfnK/0ck5pOI+InwD/Jc3s6MBPZdDpb/XP5XHeuOky/7qHngVckXU2uIPztiHgbuIEc7LNofT+3B1K1n5b1QUmagxxRsyBwCnllcyrw/5QrWE4gr3SGllE1JzM5QP2ytNd7+PhUKB/q08ga6MERcV+5Al0K2J68yv8zcD35/3mofLitcUOAdSTtxuSm02XIPr6aH5JNpzOQtdZn6/v1rHOSdgReBq6QtBLZfHcvmQh6AbJverfIuZEo0xidB/yvp0P0DS2pQZXRSzeRcxG2Av5WRjD9jry6OYIMXqsBP5b0DTJ4PQJQCU4ePt6A2pVipRlkYTK9y7oRMQagDGMeAwyXdAn5IR8UEWMj4u0ORlVaHTed9g5JcytXJpgD2FXSV8kLrjfJIPU78qL3VWCopBGSTiHnlUVMTlXU8hYk61pLBklI+hKwVkQc3MFji5NDx39AZg3eivygXx0RZ/ZmOfuDuhFN80YuY78GGYCWKaPKZojMPj4rWav6NllLfaJ1Je+7StPpS8BT5MCSpcir9ick7UTOJZuTvMo/tHaFb91TTqLdBTg3Ip6UdAIZ6C+IiBPLPveQWSKeBL5GLmD674jYrzWltqnVqgD1G2BwROzR0egk5YJsRwJfiIgXJM0cmRLfI2ymgnL2/FFkh/xTwFnAwcCTldFM3yGv5sdUjvO57oEOmk7HKOfrfQt4KSKOLhcB8+Km04ZVhuXX7s9ELhQ4lBxgchFwO/CLyOVzNgGOAT4bucTOXDHl6s1udekjWlXFvYLspFy0XLkPqlW3JY0g+z5uBNYBiIj3KvNI/IXZBUlDJW0vaZZyf1Fy7tLPgGvJJpB1yI75kZIOkzSa7CP5b+V5vOR9N9x02mtq7+XagqMB7ET2Mc1CBqM1KOtjkWtl3UWmL6ISnNwl0Me0KkDdT17NbwMZdCLTviwMbEl2Gu8dZQmBso9HMnVDmYdwKPBjYK2yeSg552YIuUz1KWUU2V1k88fDwD8jYs0yeg/w+e5OqV3WvuzmKb8XIQdGqOxTG4R0HXASmd9tr4h4svY8/sLsmqTNyWzjtQVHZ4iID4A/kouR7hgR15F92r+S9Gsy6/4/6t/Dfk/3PS2bqKtcQHAk2eRUm9N0DNnXdHBlP6+50o0yIvIE4LGIOELSnsAGwN7kbPm/k8P2N4+IZ8sX59bA5dXRTG7+6Bk3nfYOSbeT+TcPqL5HJX2F7M+7AriabCH4K/D7iHixZQW26aaVAUrAp8jRek+RazkdFRGXtKRAfVQZcHIAMDYi9q1s/z05d+wksilkBPB9MiXU78gm1IMrAyh8IdCF0jn/ReAvkUlxFyUznRwELETOZzqcTL/1B3I481Lk2mT/U6ud+jz3XJlT9jDwlYi4SVOuUrAHsCLZjP1KREwo230R0A+0bB5U+ZA+VKrwkO3yHgjRA5I2AC4F1omIW8u2r5Grgh4KnEl2Hp9HLlFyNrmkwwkR8fvqc/lLs3N1TacvkH2kHTadlv2/Rqbnei8iRlafy+e55yLiOUn7AX9QTiR/v/LwS+Tijq87OPU/Lc/FV72i9Bur5yTdRg65/bWki4GZyVnzL0ragezn+1HkcuFDgCExeR6Zz3cX3HTaXsogk9ciYidJm5FznX5Wf7Fl/UfLA5RNmzKw5GFyyfWjIuLkusdPI5cQ2DMi3i3bHJi64abT9lOGlz9Bzm+aHTgkIi4sj/k890MOUP2ApO2BEyNivsq2IWTm8XuBxSNifKvK19eUptPr6bjpdAay6fR4cijznuRE0A6bTm36KnOc9iRXdn69bHNw6qccoPoJZVLXVyNiR0kbkqPLLoiI48rj/hD3gJtO25+bTvs/B6h+otL88UjZ9IuIuLKFRerT3HTa3nyuBwYHqH5E0qZkf8gOEfFG2eaa01Ry06lZazlA9VNu/pg+3HRq1joOUP2Qmz+mHzedmrWO10Pphxycpp8yKXRnsi/qy7XgVEkQa2ZN4hqUWQ+46dSs97gGZdagugzmZtZkrkGZmVlbcg3KzMzakgOUmZm1JQcoMzNrSw5Q1lKSPpJ0r6Rxki6TNPdUPs/Ckv48vcs3FeU4VtKDko6t276BpLUr98+U9PWpfI29y9LmtfunSrq2cn9PSSf04PkOK+st1W9fUtK4qSmj2fTgAGWt9k5ErBwRKwIvA7tPzZNExLMRMVVf+NPZKOAzEbF/3fYNgLU/vvtUubnuuVYC5pI0uNxfG7ilkScqa1j1ef3l77ApOUBZO7kVWARA0jKS/ibpLkl/l7RcZfttkh6QdKSkN8v2SVf7kr4t6S+SrpH0uKQ9JO0r6Z5y7LzdvMY3So3uPkk31RdS6diyzwOSti3bLyXXKbqrtq1WNmBX4Aeltvi58tB6km6R9Fi1NiVpf0l3Srpf0s86OE/3AstKmkXSXOTiifeSq/hCBqibJa1c/t77JV0saZ7y/DdK+rWkseTii9W/bbXyd99HJxcLpTY4RtIlpexHS9pB0h3lfCxT9hsm6cLyt9wpaZ2yfXVJt5b/xy2SPlm2r1Ce495S5uH1tThJ+0k6rKO/o5R9TPl/XqVcKt76sojwj39a9gO8WX4PBi4ANi33rwOGl9trANeX25cD25fbu1aOXxIYV25/GxgPzAEMA14Ddi2PHQ/s081rPAAsUm7P3UGZvwZcU8q8ALmA3kLVv6eDYw4D9qvcP7P8vYOA5YHxZfvGQC1T+qDy967XwfPdAKwHbAIcDXyHTBS8CPBk2ed+YP1y+3Dg1+X2jcDJHZWtHLNeuX1s7ZzWvfYGwKvAQuQyJM+QK9tCBrza6/wJWLfcXhx4uNyeE5ih3P4CcGG5/b9komOAmYBZqv/Xsn0/4LD6vwOYkaw1Div3twXOaPX72z/T9uNqsbXaLJLuJb9YHwaukTQ7WQu4QJMzCs1cfq8FbFVu/wk4rpPnvSEyo/sbkl4DLivbHwA+081r3AycKel84KIOnntd4JzISbsvSBoDfBa4tPE/G4C/RKalekjSAmXbxuXnnnJ/dmA4UF+Tu6WUfxay5vkocBAwAbil1KzmjogxZf/RZECsOa++MMr+v7kjovZaZwObdVL2OyPiuXLcv4Gry/YHgM+X218Alq+c3znLeZ8LGC1pOBBkcKH8HQdLWhS4KCIeVfcZpWp/xyeBFcn3D+TFw3PdHWztzQHKWu2diFhZ0qzAVWSz0plkBvGVp+F536vcnli5P5F83w/q7DUiYldJawBbkM11q0XEf6ehLI2UUZXfR0XEqd0cezNZgxxCLj8/gayJTaCx/qe3elbUj+nu/EKe4zWjrJdVI+lE8gJi69L8eSNARPxJ0u3keb9S0veAfzFlV8SQTv4OAQ9GxFrT8DdZm3EflLWFiHgb2Av4IfA28B9J34BJfT4rlV1vI5vYALabhtd7vbPXkLRMRNweEYeQX/iL1R3+d2BbSYMlDSOb2u7o5iXfIJscu3MVsEupaSBpEUnzd7DfrcCaZJPWixERpaxbAjdHxGvAK5X+rh2BMR08zySRKwK/KmndsmmHBsrblavJ5dkBkFS7GJiLbBaEbI6tPb408FhEnABcQq679QIwv6T5JM0MfKmT13oEGCZprfJcM0paYRrLby3mAGVtIyLuIftAtie/HL9TOusfJL94AfYB9pV0P/AJsn9panX2GseWzv5xZG3kvrrjLi7lvA+4HjggIp7v5rUuA7auGyTxMRFxNdl0eaukB4A/00Fgi4hXyID0YGXzrcD8lfKOLH/L/cDKZD9Ud3YGTirNrtOasX0vYEQZ8PAQWeMD+AVwlKR7mLIVZxtgXHntFYGzIuKDUu47yH6/f3b0QpFZ578OHFP+n/cy/UZNWos4F5/1KaUp8J2ICEnbkQMmtuzuODPre9wHZX3NasCJyp7wV4FdWlweM2sS16DMzKwtuQ/KzMzakgOUmZm1JQcosx4o6YXGaHLeu/rHv1hS7TxQfm/Y22Us5Thc0hemw/PMJOkmOdedtYD7oMx6QNLuZJqe33Ty+CrACxHxrKQVgasiYpFpeD2Rn9OJU/sc00rSoWQqpj+2qgw2MLkGZdYzOwCXSDpX0ha1jSrLZ0TEPRHxbNn8IJnKaWZJS0h6VNJQSYOUyWk37ugFSoLURySdBYwDFlMnCWQl/bTs+w9J56gsm6HKch7KhLlHlTlYYyWtWpKp/lvSrpXn6ixJ7V+Y9km7Zj3mAGXWIEkzAUtHxONkDrhtKts3Aq6oO+RrwN0R8V5EPAEcA5xCZst4qEzK7cxwMhHqCmSeueHA6uSE29UkrSfps+U1ViJz5o3o4vmeLGmd/k6mkvo6mYniZ+Vv2Lij1yjHjiNzDZr1KrcrmzVuKDn3CuCvwG9K+p1NgZsi4p3ajiXNzjFk4lcAIuJ3JbXSrmQQ6MoTEXFbud1ZAtk5gEtKrrt3JV328aeZpJbI9gFg9koi3feUSWI7TVIbER9Jel/SHOU4s17hAGXWuHcoyUoj4l1JN5LLXWwLnFvbqWTjvhjYKSL+Xdk+K7BouTs7mZ+vM9Vkrh0mkJW0Tw/KXk3mWp/odYbOXqNiZuDdTh4zawo38Zk1qOS/GyypllH7PDJ33eeAv8GkJSuuAA6MiJvrnuIY4I/AIcBve/DSnSWQvRn4sqQh5bHOEqlOy2sgaT7gpZIXz6zXuAZl1jNXk+tBXVtun002s71fHt+DTGJ7iKRDyraNgU+R/TjrlCazr0naOSJ+390LRsTVkj5FJpAFeBP4VkTcqVzF934y6/cDTGXy3M5eA3iRXN+pvn/NrOk8zNysByStCvwgInZsdVkAJM0eEW+W5sObgFERcfd0fo2LyBrhv6bn85p1xzUosx6IiLsl3SBpcFlRt9VOk7Q82Tc2ugnBaSZy5V8HJ+t1rkGZtUjp27mug4c2atIKvmZ9igOUmZm1JY/iMzOztuQAZWZmbckByszM2pIDlJmZtaX/D4ruI2RT7bSLAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "v2x_regime_count.plot.bar()\n",
        "# plot = v2x_regime_count.plot(x = \"v2x_regime\", kind = \"bar\")\n",
        "# v2x_regime_count.plot().bar(x = \"v2x_regime_count\", y = \"count\")\n",
        "plt.xticks(rotation = 35, ha = \"right\", rotation_mode = \"anchor\")\n",
        "plt.xlabel(\"Regimes of the World measure\\n(v2x_regime)\")\n",
        "plt.ylabel(\"Observations (n)\")\n",
        "# y2 = plt.twinx()\n",
        "# y_vals = v2x_regime_count[\"relative_share\"]\n",
        "# y2.set_yticklabels(['{:,.0%}'.format(x) for x in y_vals])\n",
        "# y2.set_ylabel(\"Relative share\")\n",
        "\n",
        "save_fig(\"row_index\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "glhot9OAVcfn"
      },
      "outputs": [],
      "source": [
        "# v2x_regime_count = v2x_regime_count.to_frame() \n",
        "# v2x_regime_count[\"perc\"] = round(v2x_regime_count / len(vdem_2022_repl), 3)\n",
        "# v2x_regime_count"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B8yByaxz547J",
        "outputId": "acf16e87-058b-4de3-fa1a-545d8206ad6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "any_neg_change_2yr\n",
            "No change    7698\n",
            "Change        335\n",
            "Name: any_neg_change_2yr, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# take a look at transformed dependent variable (any_neg_change_2yr)\n",
        "any_neg_change_2yr_count = vdem_2022_repl.groupby(\"any_neg_change_2yr\", as_index = True)[\"any_neg_change_2yr\"].count()\n",
        "any_neg_change_2yr_count = any_neg_change_2yr_count.rename({0: \"No change\", 1: \"Change\"})\n",
        "print(any_neg_change_2yr_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "Di_UQqyj4-8P",
        "outputId": "63568adf-cdb4-4664-b690-04b3481f8c5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving figure row_index_transformed\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "any_neg_change_2yr_count.plot.bar()\n",
        "plt.xticks(rotation = 35, ha = \"right\", rotation_mode = \"anchor\")\n",
        "plt.xlabel(\"Any negative change in RoW in two-year window\")\n",
        "plt.ylabel(\"Observations (n)\")\n",
        "\n",
        "save_fig(\"row_index_transformed\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "vy4GZj4GDOmT",
        "outputId": "87efc1a5-ca91-4278-b093-7ddcd8308d12"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       lagged_epr_groups  lagged_epr_elf  lagged_epr_excluded_groups_count  \\\n",
              "count        8359.000000     8359.000000                       8359.000000   \n",
              "mean            4.513219        0.566132                          2.415361   \n",
              "std             5.160899        0.295425                          4.681094   \n",
              "min             1.000000        0.013456                          0.000000   \n",
              "25%             2.000000        0.297400                          0.000000   \n",
              "50%             4.000000        0.547600                          1.000000   \n",
              "75%             5.000000        0.833625                          3.000000   \n",
              "max            53.000000        1.000000                         51.000000   \n",
              "\n",
              "       lagged_epr_excluded_group_pop  lagged_epr_inpower_groups_count  \\\n",
              "count                    8359.000000                      8359.000000   \n",
              "mean                        0.151450                         2.097859   \n",
              "std                         0.211154                         2.045134   \n",
              "min                         0.000000                         1.000000   \n",
              "25%                         0.000000                         1.000000   \n",
              "50%                         0.065000                         1.000000   \n",
              "75%                         0.190000                         2.000000   \n",
              "max                         0.980000                        15.000000   \n",
              "\n",
              "       lagged_epr_inpower_groups_pop  lagged_epr_regaut_groups_count  \\\n",
              "count                    8359.000000                     8359.000000   \n",
              "mean                        0.764035                        0.812777   \n",
              "std                         0.254500                        3.436220   \n",
              "min                         0.008000                        0.000000   \n",
              "25%                         0.670000                        0.000000   \n",
              "50%                         0.857000                        0.000000   \n",
              "75%                         0.956000                        0.000000   \n",
              "max                         1.000000                       43.000000   \n",
              "\n",
              "       lagged_epr_regaut_group_pop    lagged_gdp  lagged_gdp_growth  ...  \\\n",
              "count                  8359.000000  8.359000e+03        8359.000000  ...   \n",
              "mean                      0.059427  2.786640e+11           3.548455  ...   \n",
              "std                       0.200287  1.169279e+12           9.950421  ...   \n",
              "min                       0.000000  1.072057e+08         -82.789537  ...   \n",
              "25%                       0.000000  6.198048e+09           1.142403  ...   \n",
              "50%                       0.000000  2.434213e+10           3.737416  ...   \n",
              "75%                       0.000000  1.459807e+11           6.191099  ...   \n",
              "max                       1.000000  1.997453e+13         319.847573  ...   \n",
              "\n",
              "       lagged_internal_confl_part_minor   lagged_war  lagged_war_major  \\\n",
              "count                       8359.000000  8359.000000       8359.000000   \n",
              "mean                           0.205647     0.031104          0.016150   \n",
              "std                            0.404198     0.173610          0.126061   \n",
              "min                            0.000000     0.000000          0.000000   \n",
              "25%                            0.000000     0.000000          0.000000   \n",
              "50%                            0.000000     0.000000          0.000000   \n",
              "75%                            0.000000     0.000000          0.000000   \n",
              "max                            1.000000     1.000000          1.000000   \n",
              "\n",
              "       lagged_war_minor  lagged_any_conflict  lagged_any_conflict_major  \\\n",
              "count       8359.000000          8359.000000                8359.000000   \n",
              "mean           0.015313             0.316425                   0.156598   \n",
              "std            0.122801             0.465109                   0.363443   \n",
              "min            0.000000             0.000000                   0.000000   \n",
              "25%            0.000000             0.000000                   0.000000   \n",
              "50%            0.000000             0.000000                   0.000000   \n",
              "75%            0.000000             1.000000                   0.000000   \n",
              "max            1.000000             1.000000                   1.000000   \n",
              "\n",
              "       lagged_any_conflict_minor  lagged_ext_conf  lagged_ext_conf_major  \\\n",
              "count                8359.000000      8359.000000            8359.000000   \n",
              "mean                    0.212585         0.316425               0.156598   \n",
              "std                     0.409161         0.465109               0.363443   \n",
              "min                     0.000000         0.000000               0.000000   \n",
              "25%                     0.000000         0.000000               0.000000   \n",
              "50%                     0.000000         0.000000               0.000000   \n",
              "75%                     0.000000         1.000000               0.000000   \n",
              "max                     1.000000         1.000000               1.000000   \n",
              "\n",
              "       lagged_ext_conf_minor  \n",
              "count            8359.000000  \n",
              "mean                0.212585  \n",
              "std                 0.409161  \n",
              "min                 0.000000  \n",
              "25%                 0.000000  \n",
              "50%                 0.000000  \n",
              "75%                 0.000000  \n",
              "max                 1.000000  \n",
              "\n",
              "[8 rows x 46 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71ef8134-2620-4df2-a9c7-51be5501a560\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lagged_epr_groups</th>\n",
              "      <th>lagged_epr_elf</th>\n",
              "      <th>lagged_epr_excluded_groups_count</th>\n",
              "      <th>lagged_epr_excluded_group_pop</th>\n",
              "      <th>lagged_epr_inpower_groups_count</th>\n",
              "      <th>lagged_epr_inpower_groups_pop</th>\n",
              "      <th>lagged_epr_regaut_groups_count</th>\n",
              "      <th>lagged_epr_regaut_group_pop</th>\n",
              "      <th>lagged_gdp</th>\n",
              "      <th>lagged_gdp_growth</th>\n",
              "      <th>...</th>\n",
              "      <th>lagged_internal_confl_part_minor</th>\n",
              "      <th>lagged_war</th>\n",
              "      <th>lagged_war_major</th>\n",
              "      <th>lagged_war_minor</th>\n",
              "      <th>lagged_any_conflict</th>\n",
              "      <th>lagged_any_conflict_major</th>\n",
              "      <th>lagged_any_conflict_minor</th>\n",
              "      <th>lagged_ext_conf</th>\n",
              "      <th>lagged_ext_conf_major</th>\n",
              "      <th>lagged_ext_conf_minor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8.359000e+03</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "      <td>8359.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.513219</td>\n",
              "      <td>0.566132</td>\n",
              "      <td>2.415361</td>\n",
              "      <td>0.151450</td>\n",
              "      <td>2.097859</td>\n",
              "      <td>0.764035</td>\n",
              "      <td>0.812777</td>\n",
              "      <td>0.059427</td>\n",
              "      <td>2.786640e+11</td>\n",
              "      <td>3.548455</td>\n",
              "      <td>...</td>\n",
              "      <td>0.205647</td>\n",
              "      <td>0.031104</td>\n",
              "      <td>0.016150</td>\n",
              "      <td>0.015313</td>\n",
              "      <td>0.316425</td>\n",
              "      <td>0.156598</td>\n",
              "      <td>0.212585</td>\n",
              "      <td>0.316425</td>\n",
              "      <td>0.156598</td>\n",
              "      <td>0.212585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5.160899</td>\n",
              "      <td>0.295425</td>\n",
              "      <td>4.681094</td>\n",
              "      <td>0.211154</td>\n",
              "      <td>2.045134</td>\n",
              "      <td>0.254500</td>\n",
              "      <td>3.436220</td>\n",
              "      <td>0.200287</td>\n",
              "      <td>1.169279e+12</td>\n",
              "      <td>9.950421</td>\n",
              "      <td>...</td>\n",
              "      <td>0.404198</td>\n",
              "      <td>0.173610</td>\n",
              "      <td>0.126061</td>\n",
              "      <td>0.122801</td>\n",
              "      <td>0.465109</td>\n",
              "      <td>0.363443</td>\n",
              "      <td>0.409161</td>\n",
              "      <td>0.465109</td>\n",
              "      <td>0.363443</td>\n",
              "      <td>0.409161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.013456</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.008000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.072057e+08</td>\n",
              "      <td>-82.789537</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.297400</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.670000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.198048e+09</td>\n",
              "      <td>1.142403</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.547600</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.065000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.857000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.434213e+10</td>\n",
              "      <td>3.737416</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.833625</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.190000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.956000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.459807e+11</td>\n",
              "      <td>6.191099</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>53.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>0.980000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.997453e+13</td>\n",
              "      <td>319.847573</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 46 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71ef8134-2620-4df2-a9c7-51be5501a560')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-71ef8134-2620-4df2-a9c7-51be5501a560 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-71ef8134-2620-4df2-a9c7-51be5501a560');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "# Double-check that all control variables are already included in the data set (FW)\n",
        "control_vars_repl = vdem_2022_repl.iloc[: , -46:]\n",
        "control_vars_repl.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YhCAD6T34-8Q"
      },
      "source": [
        "# Test (limited observations) setup for ML models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "LBhyYKUr4-8Q",
        "outputId": "55fc033a-e5de-4de7-81d6-a68f3a835e0f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "any_neg_change_2yr\n",
              "0.0    3849\n",
              "1.0     168\n",
              "Name: any_neg_change_2yr, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "# random setup\n",
        "# import random\n",
        "# print(random.randrange(1, len(vdem_2022_repl)))\n",
        "# length_sample = 100\n",
        "\n",
        "vdem_sample = vdem_2022_repl.groupby(\"any_neg_change_2yr\", group_keys=False).apply(lambda x: x.sample(frac=0.5))\n",
        "len(vdem_sample)\n",
        "vdem_sample.groupby(\"any_neg_change_2yr\", as_index = True)[\"any_neg_change_2yr\"].count()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "setup_preprocessing.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}